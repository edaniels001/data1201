[
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "note1",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column note1 using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "note1",
          "expression": "value",
          "columnName": "note1",
          "from": 13,
          "to": 14,
          "selectNumeric": true,
          "selectNonNumeric": false,
          "selectBlank": true,
          "selectError": true
        }
      ],
      "mode": "row-based"
    },
    "columnName": "yr",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column yr using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "note1",
          "expression": "value",
          "columnName": "note1",
          "from": 13,
          "to": 14,
          "selectNumeric": true,
          "selectNonNumeric": false,
          "selectBlank": true,
          "selectError": true
        }
      ],
      "mode": "row-based"
    },
    "columnName": "recordID",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column recordID using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "note1",
          "expression": "value",
          "columnName": "note1",
          "from": 13,
          "to": 14,
          "selectNumeric": true,
          "selectNonNumeric": false,
          "selectBlank": true,
          "selectError": true
        }
      ],
      "mode": "row-based"
    },
    "columnName": "period",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column period using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "note1",
          "expression": "value",
          "columnName": "note1",
          "from": 1,
          "to": 14,
          "selectNumeric": true,
          "selectNonNumeric": false,
          "selectBlank": true,
          "selectError": true
        }
      ],
      "mode": "row-based"
    },
    "columnName": "scientificName",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column scientificName using expression value.trim()"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "note1",
          "expression": "value",
          "columnName": "note1",
          "from": 1,
          "to": 14,
          "selectNumeric": true,
          "selectNonNumeric": false,
          "selectBlank": true,
          "selectError": true
        }
      ],
      "mode": "row-based"
    },
    "columnName": "scientificName",
    "guessCellType": true,
    "removeOriginalColumn": false,
    "mode": "separator",
    "separator": " ",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column scientificName by separator"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "scientificName 1",
    "newColumnName": "genus",
    "description": "Rename column scientificName 1 to genus"
  },
  {
    "op": "core/column-removal",
    "columnName": "species",
    "description": "Remove column species"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "scientificName 2",
    "newColumnName": "species",
    "description": "Rename column scientificName 2 to species"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "note1",
          "expression": "value",
          "columnName": "note1",
          "from": 1,
          "to": 14,
          "selectNumeric": true,
          "selectNonNumeric": false,
          "selectBlank": true,
          "selectError": true
        }
      ],
      "mode": "row-based"
    },
    "baseColumnName": "yr",
    "expression": "join ([coalesce(cells['yr'].value,''),coalesce(cells['mo'].value,''),coalesce(cells['dy'].value,'')],'-')",
    "onError": "keep-original",
    "newColumnName": "date",
    "columnInsertIndex": 7,
    "description": "Create column date at index 7 based on column yr using expression join ([coalesce(cells['yr'].value,''),coalesce(cells['mo'].value,''),coalesce(cells['dy'].value,'')],'-')"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "note1",
          "expression": "value",
          "columnName": "note1",
          "from": 1,
          "to": 14,
          "selectNumeric": true,
          "selectNonNumeric": false,
          "selectBlank": true,
          "selectError": true
        }
      ],
      "mode": "row-based"
    },
    "columnName": "date",
    "expression": "value.toDate()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column date using expression value.toDate()"
  },
  {
    "op": "core/mass-edit",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "scientificName",
    "expression": "value",
    "edits": [
      {
        "from": [
          "Ammospermophilus harrisii",
          "Ammospermophilis harrisi",
          "Ammospermophilus harrisi"
        ],
        "fromBlank": false,
        "fromError": false,
        "to": "Ammospermophilus harrisii"
      }
    ],
    "description": "Mass edit cells in column scientificName"
  },
  {
    "op": "core/recon",
    "engineConfig": {
      "facets": [
        {
          "type": "text",
          "name": "scientificName",
          "columnName": "scientificName",
          "query": "bai",
          "mode": "text",
          "caseSensitive": false,
          "invert": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "scientificName",
    "config": {
      "mode": "standard-service",
      "service": "https://eol.org/api/reconciliation",
      "identifierSpace": "https://eol.org/reconciliation/identifier_space",
      "schemaSpace": "https://eol.org/reconciliation/schema_space",
      "type": {
        "id": "taxon",
        "name": "Taxon"
      },
      "autoMatch": false,
      "batchSize": 10,
      "columnDetails": [],
      "limit": 0
    },
    "description": "Reconcile cells in column scientificName to type taxon"
  },
  {
    "op": "core/recon",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "scientificName: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "scientificName",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "scientificName",
    "config": {
      "mode": "standard-service",
      "service": "https://eol.org/api/reconciliation",
      "identifierSpace": "https://eol.org/reconciliation/identifier_space",
      "schemaSpace": "https://eol.org/reconciliation/schema_space",
      "type": {
        "id": "taxon",
        "name": "Taxon"
      },
      "autoMatch": false,
      "batchSize": 10,
      "columnDetails": [],
      "limit": 0
    },
    "description": "Reconcile cells in column scientificName to type taxon"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "scientificName: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "scientificName",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "scientificName",
    "similarValue": "Baiomys taylori",
    "judgment": "matched",
    "match": {
      "id": "pages/328451",
      "name": "Baiomys taylori (Thomas 1887)",
      "types": [
        "taxon"
      ],
      "score": 75
    },
    "shareNewTopics": false,
    "description": "Match item Baiomys taylori (Thomas 1887) (pages/328451) for cells containing \"Baiomys taylori\" in column scientificName"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "scientificName: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "scientificName",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "scientificName",
    "similarValue": "Chaetodipus baileyi",
    "judgment": "matched",
    "match": {
      "id": "pages/1037708",
      "name": "Chaetodipus baileyi (Merriam 1894)",
      "types": [
        "taxon"
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Chaetodipus baileyi (Merriam 1894) (pages/1037708) for cells containing \"Chaetodipus baileyi\" in column scientificName"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "scientificName: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "scientificName",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "matched",
                "l": "matched"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "baseColumnName": "scientificName",
    "expression": "cell.recon.match.id",
    "onError": "set-to-blank",
    "newColumnName": "EOL-ID",
    "columnInsertIndex": 2,
    "description": "Create column EOL-ID at index 2 based on column scientificName using expression cell.recon.match.id"
  },
  {
    "op": "core/column-addition-by-fetching-urls",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "scientificName: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "scientificName",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "matched",
                "l": "matched"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "baseColumnName": "scientificName",
    "urlExpression": "grel:\"http://api.gbif.org/v1/species/match?name=\"+escape(value,'url')",
    "onError": "set-to-blank",
    "newColumnName": "gbif_JSON",
    "columnInsertIndex": 2,
    "delay": 500,
    "cacheResponses": true,
    "httpHeadersJson": [
      {
        "name": "authorization",
        "value": ""
      },
      {
        "name": "if-modified-since",
        "value": ""
      },
      {
        "name": "accept-language",
        "value": ""
      },
      {
        "name": "accept-encoding",
        "value": ""
      },
      {
        "name": "user-agent",
        "value": "OpenRefine 3.8.5 [TRUNK]"
      },
      {
        "name": "accept",
        "value": "*/*"
      },
      {
        "name": "accept-charset",
        "value": ""
      }
    ],
    "description": "Create column gbif_JSON at index 2 by fetching URLs based on column scientificName using expression grel:\"http://api.gbif.org/v1/species/match?name=\"+escape(value,'url')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "scientificName: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "scientificName",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "matched",
                "l": "matched"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "baseColumnName": "gbif_JSON",
    "expression": "grel:value.parseJson().get(\"family\")",
    "onError": "set-to-blank",
    "newColumnName": "gbif_family",
    "columnInsertIndex": 3,
    "description": "Create column gbif_family at index 3 based on column gbif_JSON using expression grel:value.parseJson().get(\"family\")"
  }
]
